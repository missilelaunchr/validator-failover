AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template to test

Parameters:
  InstanceId:
    Type: String
    Default: i-<REPLACE>
    Description: Validator instance ID (EC2)
  NodeName:
    Type: String
    Default: ValidatorNode
    Description: Validator reference name
  CertificateId: 
    Type: String
    Default: <REPLACE>
    Description: Validator X.509 certificate ID (IOT)
  Email: 
    Type: String
    Default: <REPLACE>
    Description: Receive email alerts
  LambdaSize:
    Type: Number
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
    Description: Lambda memory size [MB]

Resources:

  LambdaStartEC2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub
            - |-
              import boto3
              ec2 = boto3.client('ec2', region_name='${HostRegion}')
              instances = ['${InstanceId}']
              def lambda_handler(event, context):
                  ec2.start_instances(InstanceIds=instances)
                  print('Started instances ' + str(instances))
            -  {HostRegion: !Ref "AWS::Region"}
      Runtime: python3.7
      Timeout: 5
      MemorySize: !Ref LambdaSize
      Handler: index.lambda_handler
      TracingConfig:
        Mode: Active
      Role: !GetAtt LambdaEC2StartStopRole.Arn

  LambdaStopEC2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub
            - |-
              import boto3
              ec2 = boto3.client('ec2', region_name='${HostRegion}')
              instances = ['${InstanceId}']
              def lambda_handler(event, context):
                  ec2.stop_instances(InstanceIds=instances)
                  print('Stopped instances ' + str(instances))
            -  {HostRegion: !Ref "AWS::Region"}
      Runtime: python3.7
      Timeout: 5
      MemorySize: !Ref LambdaSize
      Handler: index.lambda_handler
      TracingConfig:
        Mode: Active
      Role: !GetAtt LambdaEC2StartStopRole.Arn

  LambdaEC2StartStopRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        -
          PolicyName: StartStopEC2
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: 
                  - "ec2:Start*"
                  - "ec2:Stop*"
                Resource: "*"
  Cron24:
    Type: AWS::Events::Rule
    Properties:
      Description: Executes event at 24 hours
      ScheduleExpression: cron(0 0 * * ? *)
      State: DISABLED
      Targets:
        -
          Arn: !GetAtt LambdaStopEC2.Arn
          Id: !Join [ "", [ !Ref NodeName,"Cron"]]

  Cron12:
    Type: AWS::Events::Rule
    Properties:
      Description: Executes event at 12 hours
      ScheduleExpression: cron(0 12 * * ? *)
      State: DISABLED
      Targets:
        -
          Arn: !GetAtt LambdaStartEC2.Arn
          Id: !Join [ "", [ !Ref NodeName,"Cron"]]

  Iterator:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub
            - |-
              import boto3
              client = boto3.client('lambda')
              def lambda_handler(event, context):
                  index = event['iterator']['index'] + 1
                  response = client.invoke(
                      FunctionName='${LambdaStopEC2}',
                      InvocationType='Event'
                  )
                  return {
                      'index': index,
                      'continue': index < event['iterator']['count'],
                      'count': event['iterator']['count']
                  }
            -  {StreamName: !Ref LambdaStopEC2}
      Runtime: python3.7
      Timeout: 5
      MemorySize: !Ref LambdaSize
      Handler: index.lambda_handler
      TracingConfig:
        Mode: Active
      Role: !GetAtt IteratorExecutionRole.Arn

  IteratorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        -
          PolicyName: InvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt LambdaStopEC2.Arn

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ["", ["LambdaSubMinute", !Ref LambdaSize]]
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "Invoke Lambda every 10 seconds",
              "StartAt": "ConfigureCount",
              "States": {
                "ConfigureCount": {
                  "Type": "Pass",
                  "Result": {
                    "index": 0,
                    "count": 6
                  },
                  "ResultPath": "$.iterator",
                  "Next": "Iterator"
                },
                "Iterator": {
                  "Type": "Task",
                  "Resource": "${IteratorArn}",
                  "ResultPath": "$.iterator",
                  "Next": "IsCountReached"
                },
                "IsCountReached": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.iterator.continue",
                      "BooleanEquals": true,
                      "Next": "Wait"
                    }
                  ],
                  "Default": "Done"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "Iterator"
                },
                "Done": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          -  {IteratorArn: !GetAtt Iterator.Arn}
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: !Join ["", ["states.", !Ref "AWS::Region", ".amazonaws.com"]]
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: StepFunctionsInvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Iterator.Arn

  CronMinClock:
    Type: AWS::Events::Rule
    Properties:
      Description: Executes Step Functions every minute
      ScheduleExpression: rate(1 minute)
      State: DISABLED
      Targets:
        -
          Arn: !Ref StateMachine
          Id: !Join ["", ["LambdaSubMinute", !Ref LambdaSize]]
          RoleArn: !GetAtt CronMinClockExecRole.Arn

  CronMinClockExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: CloudWatchEventsStartStepFunctions
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StateMachine

  ValidatorNodePolicy: 
      Type: AWS::IoT::Policy
      Properties: 
        PolicyName: !Join [ "", [ !Ref NodeName,"Policy"]]
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: "iot:*"
              Resource: "*"

  ValidatorNodePolicyPrincipalAttachment: 
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties: 
      PolicyName: !Join [ "", [ !Ref NodeName,"Policy"]]
      Principal: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":cert/" ,!Ref CertificateId] ]
    DependsOn:
      - ValidatorNodePolicy

  ValidatorNode:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Join [ "", [ !Ref NodeName,"Thing"]]
    DependsOn:
      - ValidatorNodePolicy
    
  ValidatorNodePrincipalAttachment: 
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      ThingName: !Join [ "", [ !Ref NodeName,"Thing"]]
      Principal: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":cert/" ,!Ref CertificateId] ]
    DependsOn:
      - ValidatorNode

  ValidatorNodeIOTTopicRule: 
    Type: AWS::IoT::TopicRule
    Properties: 
      RuleName: !Join [ "", [ !Ref NodeName,"TopicRule"]]
      TopicRulePayload: 
        RuleDisabled: false
        Sql: 
            "SELECT *, topic(3) as thing FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported.status = 'inactive'"
        Actions: 
          - Lambda:
              FunctionArn: !GetAtt LambdaStartEC2.Arn
          - Sns:
              MessageFormat: JSON
              RoleArn: !GetAtt ValidatorNodeIOTExecRole.Arn
              TargetArn: !Ref ValidatorNodeSNSTopic

  ValidatorNodeIOTExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: !Join ["", ["states.", !Ref "AWS::Region", ".amazonaws.com"]]
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: !Join [ "", [ !Ref NodeName,"snsPublish"]]
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: sns:Publish
                Resource: !Ref ValidatorNodeSNSTopic

  ValidatorNodeSNSTopic:
    Type: AWS::SNS::Topic

  ValidatorEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref Email
      TopicArn: !Ref ValidatorNodeSNSTopic

  LambdaStartSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt LambdaStartEC2.Arn
      TopicArn: !Ref ValidatorNodeSNSTopic



  